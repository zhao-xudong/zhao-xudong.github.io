<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>马里奥</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-10T12:58:18.040Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>马里奥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python糗百爬虫</title>
    <link href="http://yoursite.com/2018/05/10/Python%E7%B3%97%E7%99%BE%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2018/05/10/Python糗百爬虫/</id>
    <published>2018-05-10T12:54:05.000Z</published>
    <updated>2018-05-10T12:58:18.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python糗百爬虫"><a href="#Python糗百爬虫" class="headerlink" title="Python糗百爬虫"></a>Python糗百爬虫</h1><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import urllib2</span><br><span class="line">import urllib</span><br><span class="line">import re</span><br><span class="line">url=&apos;https://www.qiushibaike.com/8hr/page/1/&apos;</span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">&apos;User-Agent&apos; : &apos;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&apos;</span><br><span class="line">&#125;</span><br><span class="line">try:</span><br><span class="line">    request=urllib2.Request(url,headers=headers)</span><br><span class="line">    response=urllib2.urlopen(request)</span><br><span class="line">    content=response.read().decode(&apos;utf-8&apos;)</span><br><span class="line">    pattern=re.compile(&apos;&lt;div class=&quot;author.*?&lt;h2&gt;(.*?)&lt;/h2&gt;.*?&apos;+&apos;&lt;div class=&quot;content&quot;&gt;.*?&lt;span&gt;(.*?)&lt;/span&gt;.*?&apos;+&apos;&lt;i class=&quot;number.*?&gt;(.*?)&lt;/i&gt;(.*?)&lt;/span&gt;.*?&apos;,re.S)</span><br><span class="line">    items=re.findall(pattern,content)</span><br><span class="line">    for item in items:</span><br><span class="line">        print item[0],item[1],item[2],item[3]</span><br><span class="line">except urllib2.URLError,e:</span><br><span class="line">    if hasattr(e,&quot;code&quot;):</span><br><span class="line">        print e.code</span><br><span class="line">    if hasattr(e,&quot;reason&quot;):</span><br><span class="line">        print e.reason</span><br></pre></td></tr></table></figure><p>爬取结果：</p><p><img src="/2018/05/10/Python糗百爬虫/001.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python糗百爬虫&quot;&gt;&lt;a href=&quot;#Python糗百爬虫&quot; class=&quot;headerlink&quot; title=&quot;Python糗百爬虫&quot;&gt;&lt;/a&gt;Python糗百爬虫&lt;/h1&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python学习地址</title>
    <link href="http://yoursite.com/2018/05/10/Python%E5%AD%A6%E4%B9%A0%E5%9C%B0%E5%9D%80/"/>
    <id>http://yoursite.com/2018/05/10/Python学习地址/</id>
    <published>2018-05-10T03:14:33.000Z</published>
    <updated>2018-05-10T13:06:06.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python学习地址"><a href="#Python学习地址" class="headerlink" title="Python学习地址"></a>Python学习地址</h1><hr><p><a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="noopener">廖雪峰的Python基础知识</a></p><p><a href="https://cuiqingcai.com/1052.html" target="_blank" rel="noopener">崔庆才的Python爬虫学习</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python学习地址&quot;&gt;&lt;a href=&quot;#Python学习地址&quot; class=&quot;headerlink&quot; title=&quot;Python学习地址&quot;&gt;&lt;/a&gt;Python学习地址&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng.
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python入门级爬取百度百科词条</title>
    <link href="http://yoursite.com/2018/05/10/Python%E5%85%A5%E9%97%A8%E7%BA%A7%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91%E8%AF%8D%E6%9D%A1/"/>
    <id>http://yoursite.com/2018/05/10/Python入门级爬取百度百科词条/</id>
    <published>2018-05-10T03:12:33.000Z</published>
    <updated>2018-05-10T03:50:39.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python入门级爬取百度百科词条"><a href="#Python入门级爬取百度百科词条" class="headerlink" title="Python入门级爬取百度百科词条"></a>Python入门级爬取百度百科词条</h1><hr><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>爬取 <a href="https://baike.baidu.com/historylist/Angelababy/1509275#page1" target="_blank" rel="noopener">Angelababy词条历史版本 </a>中的value值。</p><h2 id="尝试爬取网页"><a href="#尝试爬取网页" class="headerlink" title="尝试爬取网页"></a>尝试爬取网页</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># _*_ coding:utf-8 _*_</span><br><span class="line">import urllib</span><br><span class="line">import urllib2</span><br><span class="line">import re</span><br><span class="line">page = 1</span><br><span class="line">url = &apos;https://baike.baidu.com/historylist/Angelababy/1509275#page&apos;+str(page)</span><br><span class="line">try:</span><br><span class="line">    request = urllib2.Request(url)</span><br><span class="line">    response = urllib2.urlopen(request)</span><br><span class="line">    print response.read()</span><br><span class="line">except urllib2.URLError, e:</span><br><span class="line">    if hasattr(e,&quot;code&quot;):</span><br><span class="line">        print e.code</span><br><span class="line">    if hasattr(e,&quot;reason&quot;):</span><br><span class="line">        print e.reason</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2018/05/10/Python入门级爬取百度百科词条/001.jpg" alt=""></p><p>可以看到已经爬取了此网页所有的内容。现在需要实现的就是爬取想要的value值了。</p><h2 id="爬取目标内容"><a href="#爬取目标内容" class="headerlink" title="爬取目标内容"></a>爬取目标内容</h2><p><img src="/2018/05/10/Python入门级爬取百度百科词条/002.jpg" alt=""></p><p>可以看到要爬取的内容，格式全部一样都是图中所示，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td class=&quot;checkBox&quot;&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; value=&quot;128140635&quot;&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><p>所以我们做以下正则匹配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(&apos;&lt;tr&gt;.*?&lt;td class=&quot;checkBox&quot;&gt;.*?&lt;input.*?value=&quot;(.*?)&quot;&gt;.*?&lt;/td&gt;.*?&lt;/tr&gt;&apos;,re.S)</span><br></pre></td></tr></table></figure><p>全部代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># _*_ coding:utf-8 _*_</span><br><span class="line">import urllib</span><br><span class="line">import urllib2</span><br><span class="line">import re</span><br><span class="line">page = 1</span><br><span class="line">url = &apos;https://baike.baidu.com/historylist/Angelababy/1509275#page&apos;+str(page)</span><br><span class="line">try:</span><br><span class="line">    request = urllib2.Request(url)</span><br><span class="line">    response = urllib2.urlopen(request)</span><br><span class="line">    content = response.read().decode(&apos;utf-8&apos;)</span><br><span class="line">    pattern = re.compile(&apos;&lt;tr&gt;.*?&lt;td class=&quot;checkBox&quot;&gt;.*?&lt;input.*?value=&quot;(.*?)&quot;&gt;.*?&lt;/td&gt;.*?&lt;/tr&gt;&apos;,re.S)</span><br><span class="line">    items = re.findall(pattern,content)</span><br><span class="line">    for item in items:</span><br><span class="line">        print(item)</span><br><span class="line">except urllib2.URLError,e:</span><br><span class="line">    if hasattr(e,&quot;code&quot;):</span><br><span class="line">        print e.code</span><br><span class="line">    if hasattr(e,&quot;reason&quot;):</span><br><span class="line">        print e.reason</span><br></pre></td></tr></table></figure><p>爬取结果如下：</p><p><img src="/2018/05/10/Python入门级爬取百度百科词条/003.jpg" alt=""></p><h2 id="学习链接"><a href="#学习链接" class="headerlink" title="学习链接"></a>学习链接</h2><p><a href="https://cuiqingcai.com/990.html" target="_blank" rel="noopener">崔庆才的个人博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python入门级爬取百度百科词条&quot;&gt;&lt;a href=&quot;#Python入门级爬取百度百科词条&quot; class=&quot;headerlink&quot; title=&quot;Python入门级爬取百度百科词条&quot;&gt;&lt;/a&gt;Python入门级爬取百度百科词条&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="百科词条" scheme="http://yoursite.com/tags/%E7%99%BE%E7%A7%91%E8%AF%8D%E6%9D%A1/"/>
    
  </entry>
  
  <entry>
    <title>鲜衣怒马，归来不再少年</title>
    <link href="http://yoursite.com/2018/04/29/%E9%B2%9C%E8%A1%A3%E6%80%92%E9%A9%AC%EF%BC%8C%E5%BD%92%E6%9D%A5%E4%B8%8D%E5%86%8D%E5%B0%91%E5%B9%B4/"/>
    <id>http://yoursite.com/2018/04/29/鲜衣怒马，归来不再少年/</id>
    <published>2018-04-29T14:40:30.000Z</published>
    <updated>2018-04-29T15:24:50.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="鲜衣怒马，归来不在少年"><a href="#鲜衣怒马，归来不在少年" class="headerlink" title="鲜衣怒马，归来不在少年"></a>鲜衣怒马，归来不在少年</h1><hr><p>​    周末总是孤独的，想要找些什么填充自己，划着优酷，划到了《前任3》，于是… …</p><p>​    空间里有朋友在刷屏，好像是失恋了，不知道发生了什么。想起了前几天手机崩溃，相册被清空的事，后怕的打开了相册。第一张是在学四公寓拍的一张照片，当时很非，便做了很久的头像，那是一本我从来没有读过的屠格涅夫散文集，现在翻起来却又是另一番味道，让人沉迷。</p><p>​            <img src="/2018/04/29/鲜衣怒马，归来不再少年/001.jpg" alt=""></p><p>​    翻到了两年前的自拍，比现在瘦比现在阳光。翻到了学生会的合影，灯光很暖，翻到了烫头的照片，或许以前的肆无忌惮也只有回忆了，时间总是向前走的，回忆也无法回到过去。年少轻狂，满纸荒唐。曾经不是一个人，便天不怕地不怕，颇有挥斥方遒，意气风发。回过头来，其实也只是一段梦，梦的很真实，梦的很开心。梦总是要醒来的，毕竟生活还是要继续的。人会变，生活也会变，生活越来越喜欢与你独处，喜欢看你迷茫的样子，喜欢你拿起酒杯的样子。</p><p><img src="/2018/04/29/鲜衣怒马，归来不再少年/002.jpg" alt=""></p><p>​    看到这张图的时候，不知道自己在想什么，只是觉得很舒服，好像什么都放下了一样。我收到了肯定，不艰辛的不是成长，熬过苦难便是收获，每一个看到她的人都露出了微笑。自己选择的路，终归要走下去，对于新鲜的事物也有一定保质期，我感觉自己的审美疲劳到来了。得得失失，失失得得，终归要结束这宴席，毕竟我一定不是适合这场游戏的。生活吗，尤其是要走向成年人的生活，哈哈哈哈泡枸杞喝热水，终归要失去点什么、看透点什么、学会点什么或许还能带进土里。</p><p>​        <img src="/2018/04/29/鲜衣怒马，归来不再少年/003.jpg" alt=""></p><p>​    有些照片、有些话语我会好好的保存下来，它常常能带给我开心，像是冬日透过云彩的阳光散落在身上，温暖着丝丝凉意。等到我再次翻阅的时候，我会感觉到可笑、幼稚，那时候我应该是已经忘记了那种感觉，无法再构建起那份回忆，我希望我不会删除它们。</p><p>​    鲜衣怒马，归来……</p><p>​    不在少年。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;鲜衣怒马，归来不在少年&quot;&gt;&lt;a href=&quot;#鲜衣怒马，归来不在少年&quot; class=&quot;headerlink&quot; title=&quot;鲜衣怒马，归来不在少年&quot;&gt;&lt;/a&gt;鲜衣怒马，归来不在少年&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;​    周末总是孤独的，想要找些什么填充自己，划着优酷，
      
    
    </summary>
    
      <category term="生活小调" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%B0%83/"/>
    
    
      <category term="negative" scheme="http://yoursite.com/tags/negative/"/>
    
  </entry>
  
  <entry>
    <title>社会再叛逆，也要做社会主义接班人</title>
    <link href="http://yoursite.com/2018/04/26/%E7%A4%BE%E4%BC%9A%E5%86%8D%E5%8F%9B%E9%80%86%EF%BC%8C%E4%B9%9F%E8%A6%81%E5%81%9A%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89%E6%8E%A5%E7%8F%AD%E4%BA%BA/"/>
    <id>http://yoursite.com/2018/04/26/社会再叛逆，也要做社会主义接班人/</id>
    <published>2018-04-26T15:26:38.000Z</published>
    <updated>2018-04-26T15:29:40.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="社会再叛逆，也要做社会主义接班人"><a href="#社会再叛逆，也要做社会主义接班人" class="headerlink" title="社会再叛逆，也要做社会主义接班人"></a>社会再叛逆，也要做社会主义接班人</h1><hr><p>​    时2018年4月24日，去往颐和园的公交上。</p><p>​    车走过两站，终于有一个空座，于是就坐了下来，刷刷知乎，回回消息。车又过了一站，上来了一家人（爷爷奶奶带着小孙子），上车后售票员开始说希望坐老弱病残座儿的给小孩子让座之类的话，然而大家都在低头刷手机并没有要让座的意思，小孩子的奶奶上来以后并没有喊着售票员要给小孙子找座，而是拉紧小孙子想让他坐在车座旁边的地方（在我认为，这就是一种很有素质的行为，而且脑子里都是孩子）。我习惯给老人孕妇孩子让座，于是我（蓝座）就招呼着让她们坐下来，这位奶奶一边安置着小孙子，一边跟我说谢谢，并且让小孙子说“谢谢叔叔”，小孙子很乖，也对我说了。说真的，这一刻我真的感慨这位奶奶的教育，这肯定不是这一刻才教育出来的。当然写这些并不是要表现我自己有多么高大上，站在道德制高点批评别人，而是对成长的疑惑，困扰了我很久的疑惑。</p><p>​    我很难预测未来的我是什么职业、什么性格、什么价值观。但是我从小被中华美德教育熏陶，并努力追求现如今的社会主义价值观。我会去尊重每一位值得我尊敬的人，我会对说清洁阿姨说谢谢，会对服务生说谢谢，会对每一位“卑微”职业的人说谢谢；我会对我的老师说谢谢，对同学说谢谢，会对每一位帮助过我的人说谢谢；我觉得这是尊重别人的基本，也是对自己的尊重。我会拧紧每一个水龙头，我会将电池扔到该扔的地方，我觉得我应该为保护地球做出一点贡献。我会给小孩、老人和孕妇让座，我会对服务生说“我自己来”，我会去农民工子弟学校面对叽叽喳喳的学生进行支教，我觉得这是我应该做的。</p><p>​    我曾看到过很多人忽略，或许长大让他们变得很忙碌，每天踩着快节奏的鼓点奔波忙碌，忙到没有意识没有精力打理这种小事，忘了说一声谢谢；或许他们累了，累到已经无法再去让座了；或许生活让他们心情有些难过，只能独善其身。</p><p>​    我也曾看到很多人背道而驰，不仅对类似的事嗤之以鼻，甚至对”施善者“打压构建和谐友爱社会的积极性，在他邻域的人会因为他的话他的行为开始不去做这些事，或许这就是社会的叛逆。</p><p>​    成功者的路是孤独的。成功者的标新立异才造就孤独吧。我不想在后辈的语文课上没有了中华美德熏陶，我相信哪怕我温暖了一个人，也会温暖我整个世界。</p><p>​    我不知道未来的自己是什么样的，我害怕以后的我是现在的我所不喜欢的、是陌生的。那么，在现在的年纪，希望自己依旧跟随自己的内心做一些心中的小善，哪怕未来的自己是那么陌生、可恶，当我望向台灯的时候，我会记得我曾经努力的在做社会主义的接班人。</p><p><img src="/2018/04/26/社会再叛逆，也要做社会主义接班人/yet.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;社会再叛逆，也要做社会主义接班人&quot;&gt;&lt;a href=&quot;#社会再叛逆，也要做社会主义接班人&quot; class=&quot;headerlink&quot; title=&quot;社会再叛逆，也要做社会主义接班人&quot;&gt;&lt;/a&gt;社会再叛逆，也要做社会主义接班人&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;​    时201
      
    
    </summary>
    
      <category term="生活小调" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%B0%83/"/>
    
    
      <category term="禅" scheme="http://yoursite.com/tags/%E7%A6%85/"/>
    
  </entry>
  
  <entry>
    <title>Font类</title>
    <link href="http://yoursite.com/2018/04/22/Font%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/04/22/Font类/</id>
    <published>2018-04-22T07:46:28.000Z</published>
    <updated>2018-04-22T14:00:44.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Font类"><a href="#Font类" class="headerlink" title="Font类"></a>Font类</h1><hr><p><strong>要点提示：</strong>Font类描述字体名、粗细和大小。</p><p>​    可以砸渲染文字的时候设置字体信息。javafx.scene.text.Font类用于创建字体。</p><p>​    Font实例可以使用它的构造方法或者静态方法来创建。Font可以用它的名字、字体粗细、字体形态和大小来描述。Times、Courier和Arial是字体名字的实例。可以通过调用静态方法getFamilies()获得一个可用的字体系列名字列表。List是一个为列表字体通过方法的接口。ArrayList是List的一个具体实现。字体形态是两个常量：<strong>FontPosture.IRALIC</strong>和<strong>FontPosture.REGULAR</strong>。例如下面的语句生成两个字体。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Font font1 = new Font(&quot;SansSerif&quot;,16);//字体(SansSerif，大小16)</span><br><span class="line">Font font2 = Font.font(&quot;Times New Roman&quot;,FontPosture.IRALC,FontPosture.REGULAR,20);//字体(Times New Roman、加粗、斜体和大小为20)</span><br></pre></td></tr></table></figure><p><strong>javafx.scene.text.Font</strong></p><p>-size: double                //该字体的大小</p><p>-name: String            //该字体的名字</p><p>-family: String            //该字体属于的字体集</p><p>+Font(size: double)        //使用给定字体大小创建一个Font</p><p>+Font(name: String,size: double)//使用给定的字体完整名称和大小创建一个Font</p><p>+font(name: String,size: double)//使用给定的字体名称和大小创建一个Font</p><p>+font(name: String,w: FontWeight,size: double)//使用给定的字体名称、粗细和大小创建一个Font</p><p>+font(name: String,w: FontWeight,p:FontPosture,size: double)//使用给定的字体名称、粗细、字形以及大小创建一个Font</p><p>+getFamilies(): List<string>    //返回一个字体集名字的列表</string></p><p>+getFontName(): List<string>    //返回一个字体完整名称的列表，包括字体集和粗细</string></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package ohhh;</span><br><span class="line">import javafx.application.Application;</span><br><span class="line">import javafx.scene.Scene;</span><br><span class="line">import javafx.scene.layout.*;</span><br><span class="line">import javafx.scene.paint.Color;</span><br><span class="line">import javafx.scene.shape.Circle;</span><br><span class="line">import javafx.scene.text.*;</span><br><span class="line">import javafx.scene.control.*;</span><br><span class="line">import javafx.stage.Stage;</span><br><span class="line">public class FontDemo extends Application&#123;</span><br><span class="line">@Override</span><br><span class="line">public void start(Stage primaryStage)&#123;</span><br><span class="line">Pane pane = new StackPane();</span><br><span class="line"></span><br><span class="line">Circle circle = new Circle();</span><br><span class="line">circle.setRadius(50);</span><br><span class="line">circle.setStroke(Color.BLACK);</span><br><span class="line">circle.setFill(new Color(0.5,0.5,0.5,0.1));</span><br><span class="line">pane.getChildren().add(circle);</span><br><span class="line"></span><br><span class="line">Label label = new Label(&quot;JavaFX&quot;);</span><br><span class="line">label.setFont(Font.font(&quot;Times New Roman&quot;,FontWeight.BOLD,FontPosture.ITALIC,20));</span><br><span class="line">pane.getChildren().add(label);</span><br><span class="line"></span><br><span class="line">Scene scene=new Scene(pane);</span><br><span class="line">primaryStage.setTitle(&quot;FontDemo&quot;);</span><br><span class="line">primaryStage.setScene(scene);</span><br><span class="line">primaryStage.show();</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">Application.launch(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/2018/04/22/Font类/javaFX.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Font类&quot;&gt;&lt;a href=&quot;#Font类&quot; class=&quot;headerlink&quot; title=&quot;Font类&quot;&gt;&lt;/a&gt;Font类&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;要点提示：&lt;/strong&gt;Font类描述字体名、粗细和大小。&lt;/p&gt;
&lt;p&gt;​    可
      
    
    </summary>
    
      <category term="Java(基础篇)" scheme="http://yoursite.com/categories/Java-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="JavaFX" scheme="http://yoursite.com/tags/JavaFX/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList类</title>
    <link href="http://yoursite.com/2018/04/22/ArrayList%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/04/22/ArrayList类/</id>
    <published>2018-04-21T16:18:23.000Z</published>
    <updated>2018-04-21T16:36:42.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h1><hr><p>java.util.ArrayList<e></e></p><p>+ArrayList()                //返回一个空的列表</p><p>+add(o:E): void            //添加一个新元素o到列表末尾</p><p>+add(index: int,o: E): void     //添加一个新元素o到该列表的指定下标位置</p><p>+clear(): void                //清除列表所有元素</p><p>+contains(o: Object)        //如果该列表有o，返回true</p><p>+get(index: int): E            //返回该列表指定下标位置的元素</p><p>+indexOf(o: Object): int    //返回列表中第一个匹配元素的下标</p><p>+isEmpty(): boolean        //如果该列表不包括任何元素，返回true</p><p>+lastIndexOf(o: Object): int    //返回列表中匹配的最后一个元素的下标</p><p>+remove(o: Object): boolean        //去除列表的第一个元素，如果该元素被去除，则返回true</p><p>+size(): int                    //返回列表中元素个数</p><p>+remove(index: int): E            //去除指定下标位置的元素，如果该元素被去除，则返回true</p><p>set(index: int,o: E): E            //设置指定下标位置的元素</p><p>程序清单：TestArrayList.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package ohhh;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">public class TestArrayList &#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">ArrayList&lt;String&gt; cityList = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">cityList.add(&quot;London&quot;);//添加London</span><br><span class="line">cityList.add(&quot;Denver&quot;);//添加Denver</span><br><span class="line">cityList.add(&quot;Paris&quot;);//添加Paris</span><br><span class="line">cityList.add(&quot;Miami&quot;);//添加Miami</span><br><span class="line">cityList.add(&quot;Seoul&quot;);//添加Seoul</span><br><span class="line">cityList.add(&quot;Tokyo&quot;);//添加Tokyo</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;List size? &quot;+cityList.size());//列表元素数</span><br><span class="line">System.out.println(&quot;Is Miami in the list? &quot;+cityList.contains(&quot;Miami&quot;));//是否有Miami</span><br><span class="line">System.out.println(&quot;The location of Denver in the list? &quot;+cityList.indexOf(&quot;Denver&quot;));//Denver的下标</span><br><span class="line">System.out.println(&quot;Is the list empty? &quot;+cityList.isEmpty());//列表是否为空</span><br><span class="line">cityList.add(2, &quot;Xian&quot;);//下标为2添加Xian</span><br><span class="line">cityList.remove(&quot;remove&quot;);//抹除</span><br><span class="line">cityList.remove(1);//抹除下标为1的</span><br><span class="line">System.out.println(cityList.toString());//输出cityList列表</span><br><span class="line">for(int i=cityList.size()-1;i&gt;=0;i--)</span><br><span class="line">System.out.print(cityList.get(i));//输出列表里的所有元素</span><br><span class="line">System.out.println();</span><br><span class="line">ArrayList&lt;CircleFromSimpleGeometricObject&gt; list= new ArrayList&lt;&gt;();</span><br><span class="line">list.add(new CircleFromSimpleGeometricObject(2));</span><br><span class="line">list.add(new CircleFromSimpleGeometricObject(3));</span><br><span class="line">System.out.println(&quot;The area of the first circle? &quot;+list.get(0).getArea());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List size? 6</span><br><span class="line">Is Miami in the list? true</span><br><span class="line">The location of Denver in the list? 1</span><br><span class="line">Is the list empty? false</span><br><span class="line">[London, Xian, Paris, Miami, Seoul, Tokyo]</span><br><span class="line">TokyoSeoulMiamiParisXianLondon</span><br><span class="line">The area of the first circle? 0.0</span><br></pre></td></tr></table></figure><p><strong>对列表有用的方法</strong></p><p>Array类中的静态方法asList返回一个列表，该列表传递给ArrayList的构造方法用于创建一个ArrayList。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] array = &#123;&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;&#125;;</span><br><span class="line">ArrayList&lt;String&gt; list=new ArrayList&lt;&gt;(Array.asList(array));</span><br></pre></td></tr></table></figure><p>反过来也可以使用list.toArray(array1)从数组列表创建一个对象数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] array1 = new String[list.size()];</span><br><span class="line">list.toArray(array1);</span><br></pre></td></tr></table></figure><p>如果列表中的元素是可比较的，比如整数、双精度浮点数或者字符串 ，则可以使用java.util.Collections类中的静态方法sort方法来对元素进行排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer[] array = &#123;3,5,95,4,15,34,3,6,5&#125;;</span><br><span class="line">ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;(Array.asList(array));</span><br><span class="line">java.util.Collections(list);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><p>可以使用java.util.Collections类中的静态的max和min方法来返回列表中的最大和最小元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer[] array = &#123;3,5,95,4,15,34,3,6,5&#125;;</span><br><span class="line">ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;(Array.asList(array));</span><br><span class="line">System.out.println(java.util.Collections.max(list));</span><br><span class="line">System.out.println(java.util.Collections.min(list));</span><br></pre></td></tr></table></figure><p>可以使用java.util.Collections类中的静态方法shuffle方法来随机打乱列表的元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer[] array = &#123;3,5,95,4,15,34,3,6,5&#125;;</span><br><span class="line">ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;(Array.asList(array));</span><br><span class="line">java.util.Collection.shuffle(list);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><p>完结。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ArrayList类&quot;&gt;&lt;a href=&quot;#ArrayList类&quot; class=&quot;headerlink&quot; title=&quot;ArrayList类&quot;&gt;&lt;/a&gt;ArrayList类&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;java.util.ArrayList&lt;e&gt;&lt;/e&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="Java(基础篇)" scheme="http://yoursite.com/categories/Java-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="ArrayList" scheme="http://yoursite.com/tags/ArrayList/"/>
    
  </entry>
  
  <entry>
    <title>动态绑定</title>
    <link href="http://yoursite.com/2018/04/21/%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A/"/>
    <id>http://yoursite.com/2018/04/21/动态绑定/</id>
    <published>2018-04-21T11:14:57.000Z</published>
    <updated>2018-04-21T11:49:51.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h1><p><strong>要点提示：</strong>方法可以沿着继承链的多个类中实现。JVM决定运行时调用哪个方法。</p><p>​    方法可以在父类中定义而在子类中重写。例如：toString()方法在Object类中定义的，而在GeometricObject类中重写。思考下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object o =new GeometricObject();</span><br><span class="line">System.out.println(o.toString());</span><br></pre></td></tr></table></figure><p>​    这里的o调用哪个toString()呢？为了回答这个问题，我们首先介绍两个术语：声明类型和实际类型。一个变量必须被声明为某种类型。变量的这个类型成为它的<strong>声明类型</strong>（declared type）。这里，o的声明类型是Object。一个引用类型变量可以是一个null值或者一个对声明类型实例的引用。实例可以使用声明类型或它的子类型的构造方法创建。变量的<strong>实际类型</strong>（actual type）是被变量引用的对象的实际类。这里，o的实际类型是GeometricObject,因为o指向使用new GeometricObject()创建的对象。o调用哪个toString()方法由o的实际类型决定。这成为<strong>动态绑定</strong>。</p><p>​    <strong>动态绑定的工作机制</strong>如下：假设对象o是类C1，C2，….，Cn的实例，其中C1是C2的子类，C2是C3的子类…Cn-1是Cn的子类，也就是说Cn是最通用类，C1是最特殊的类。在Java中，Cn是Object类。如果对象o调用一个方法p，那么JVM会依次在类C1，C2，….，Cn-1，Cn中查找方法p的实现，直到找到为止。一旦找到就实现，就停止查找，然后使用首先找到的实现。</p><p>DynamicBindingDemo.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package ohhh;</span><br><span class="line"></span><br><span class="line">public class DynamicBindingDemo&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        m(new GraduateStudent());</span><br><span class="line">        m(new Student());</span><br><span class="line">        m(new Person());</span><br><span class="line">        m(new Object());</span><br><span class="line">    &#125;</span><br><span class="line">    public static void m(Object x)&#123;</span><br><span class="line">        System.out.println(x.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    public static class GraduateStudent extends Student&#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    public static class Student extends Person&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public String toString()&#123;</span><br><span class="line">            return &quot;Student&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static class Person extends Object&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public String toString()&#123;</span><br><span class="line">            return &quot;Person&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2018/04/21/动态绑定/qwe.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;动态绑定&quot;&gt;&lt;a href=&quot;#动态绑定&quot; class=&quot;headerlink&quot; title=&quot;动态绑定&quot;&gt;&lt;/a&gt;动态绑定&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;要点提示：&lt;/strong&gt;方法可以沿着继承链的多个类中实现。JVM决定运行时调用哪个方法。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Java(基础篇)" scheme="http://yoursite.com/categories/Java-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>给自己的博客加上图片</title>
    <link href="http://yoursite.com/2018/04/19/%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%8A%A0%E4%B8%8A%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2018/04/19/给自己的博客加上图片/</id>
    <published>2018-04-19T00:38:40.000Z</published>
    <updated>2018-04-19T01:14:15.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="给自己的博客加上图片"><a href="#给自己的博客加上图片" class="headerlink" title="给自己的博客加上图片"></a>给自己的博客加上图片</h1><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写博客的时候，有时候图片比文字更有说服力，比如：代码运行结果，本来一张图片解决的事情，不用图片的话，就得自己敲结果，然而别人不一定能看懂，这就非常尴尬了，所以说，在某些时候图片的说服力还是很强大的，比如下面这张表达的意思。</p><p><img src="/2018/04/19/给自己的博客加上图片/sousuo.jpg" alt="嘤嘤嘤"></p><p>​    言归正传，我下面介绍一下我比较相中的办法，因为不用借助七牛等等，当然相比较而言的优缺点就忽略吧。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>1.首先把blog（hexo）目录下的_config.yml里的psot_asset_folder:设置为true</p><p>2.在blog（hexo）目录下执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>3.在blog（hexo）目录下Git Bash Here，运行hexo n “博客名”来生成md博客时，会在_post目录下看到一个与博客同名的文件夹。</p><p>4.将想要上传的图片先扔到文件夹下，然后在博客中使用markdown的格式引入图片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![你想要输入的替代文字](xxxx/图片名.jpg)</span><br></pre></td></tr></table></figure><p>ps：因为博客名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。</p><p>5.然后，使用hexo g部署的时候，进入public\2018\04\19\index.html文件中查看相关字段，可以发现html标签内的语句是<strong>img src = “2018/04/19/xxxx/图片名.jpg”</strong>而不是<strong>img src=”xxxx.图片名.jpg”</strong>，这就成功了，当然前面步骤操作正确的话，这一步也不用检查。</p><p>​    最后放一张帅照，并感谢<a href="https://blog.csdn.net/sugar_rainbow/article/details/57415705" target="_blank" rel="noopener">Nubb</a>，为你引流233333。</p><p><img src="/2018/04/19/给自己的博客加上图片/576452.jpg" alt="桌面"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;给自己的博客加上图片&quot;&gt;&lt;a href=&quot;#给自己的博客加上图片&quot; class=&quot;headerlink&quot; title=&quot;给自己的博客加上图片&quot;&gt;&lt;/a&gt;给自己的博客加上图片&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="博客杂谈" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="博客搭建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>判断回文串时忽略既非字母又非数字的字符</title>
    <link href="http://yoursite.com/2018/04/18/%E5%88%A4%E6%96%AD%E5%9B%9E%E6%96%87%E4%B8%B2%E6%97%B6%E5%BF%BD%E7%95%A5%E6%97%A2%E9%9D%9E%E5%AD%97%E6%AF%8D%E5%8F%88%E9%9D%9E%E6%95%B0%E5%AD%97%E7%9A%84%E5%AD%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2018/04/18/判断回文串时忽略既非字母又非数字的字符/</id>
    <published>2018-04-18T06:55:22.000Z</published>
    <updated>2018-04-18T15:32:30.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断回文串时忽略既非字母又非数字的字符"><a href="#判断回文串时忽略既非字母又非数字的字符" class="headerlink" title="判断回文串时忽略既非字母又非数字的字符"></a>判断回文串时忽略既非字母又非数字的字符</h1><hr><h2 id="问题及解决办法"><a href="#问题及解决办法" class="headerlink" title="问题及解决办法"></a>问题及解决办法</h2><p>​    1.question：通过删除既非字母有非数字的字符过滤这个字符串。answer：创建一个新的空字符串构建器，将字符串中每一个字母或数字字符添加到字符串构建器中，然后从这个构建器返回所求的字符串。可以使用Character类中的isLetterOrDigit(ch)方法来检测字符ch是否是数字或字母。</p><p>​    2.question：倒置过滤后的字符串得到一个新字符串。使用equal方法对倒置后的字符串和过滤后的字符串进行比较。</p><h2 id="完整程序"><a href="#完整程序" class="headerlink" title="完整程序"></a>完整程序</h2><p><strong>PalindromeIgnoreNonAlphanumeric.java</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class PalindromeIgnoreNonAlphanumeric &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">Scanner input = new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;Enter a string:&quot;);</span><br><span class="line">String s = input.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;Ignoring nonalphanumeric characters,\nis &quot;+s+&quot; a palindrome? &quot;+isPalindrome(s));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static boolean isPalindrome(String s)&#123;</span><br><span class="line">String s1=filter(s);</span><br><span class="line">String s2=reverse(s1);</span><br><span class="line">return s2.equals(s1);</span><br><span class="line">&#125;</span><br><span class="line">public static String filter(String s)&#123;</span><br><span class="line">StringBuilder stringBuilder = new StringBuilder();</span><br><span class="line">for(int i=0;i&lt;s.length();i++)</span><br><span class="line">&#123;</span><br><span class="line">if(Character.isLetterOrDigit(s.charAt(i)))&#123;</span><br><span class="line">stringBuilder.append(s.charAt(i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return stringBuilder.toString();</span><br><span class="line">&#125;</span><br><span class="line">public static String reverse(String s)&#123;</span><br><span class="line">StringBuilder stringBuilder=new StringBuilder(s);</span><br><span class="line">stringBuilder.reverse();</span><br><span class="line">return stringBuilder.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//ex1:</span><br><span class="line">Enter a string:</span><br><span class="line">ab&lt;c&gt;b?a</span><br><span class="line">Ignoring nonalphanumeric haracters,</span><br><span class="line">is ab&lt;c&gt;b?a a palindrome? true</span><br><span class="line">//ex2:</span><br><span class="line">Enter a string:</span><br><span class="line">abcc&gt;&lt;?cab</span><br><span class="line">Ignoring nonalphanumeric haracters,</span><br><span class="line">is abcc&gt;&lt;?cab a palindrome? false</span><br></pre></td></tr></table></figure><p>​    filter(String s)方法逐个检查字符串s中的每个字符，如果字符是字母或者数字字符，就将他复制到字符串构建器。filter方法返回构建器中的字符串。reverse(String s)方法创建一个新字符串，这个新串是对给定字符串s的倒置。filter方法和reverse方法都会返回一个新字符串，原始字符串并没有改变。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;判断回文串时忽略既非字母又非数字的字符&quot;&gt;&lt;a href=&quot;#判断回文串时忽略既非字母又非数字的字符&quot; class=&quot;headerlink&quot; title=&quot;判断回文串时忽略既非字母又非数字的字符&quot;&gt;&lt;/a&gt;判断回文串时忽略既非字母又非数字的字符&lt;/h1&gt;&lt;hr&gt;

      
    
    </summary>
    
      <category term="Java(基础篇)" scheme="http://yoursite.com/categories/Java-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>toString、capacity、length、setlength和charAt方法</title>
    <link href="http://yoursite.com/2018/04/18/toString%E3%80%81capacity%E3%80%81length%E3%80%81setlength%E5%92%8CcharAt%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/18/toString、capacity、length、setlength和charAt方法/</id>
    <published>2018-04-18T06:18:22.000Z</published>
    <updated>2018-04-18T06:18:58.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="toString、capacity、length、setlength和charAt方法"><a href="#toString、capacity、length、setlength和charAt方法" class="headerlink" title="toString、capacity、length、setlength和charAt方法"></a>toString、capacity、length、setlength和charAt方法</h1><hr><p>​    StringBuilder类提供了许多其他处理字符串构建器和获取它的属性的办法。</p><p><strong>java.lang.StringBuilder</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+toString(): String//从字符串构建器返回一个字符串对象</span><br><span class="line">+capacity(): int//返回该字符串构建器的容量</span><br><span class="line">+charAt(index: int): char//返回指定索引位置的字符</span><br><span class="line">+length(): int//返回该构建器中的字符数</span><br><span class="line">+setLength(newLength: int): void//设置该构建器的新长度</span><br><span class="line">+substring(startIndex: int): String//返回从startIndex开始的字符串</span><br><span class="line">+substring(startIndex: int,endIndex: int):String//返回从startIndex开始endIndex结束的子字符串</span><br><span class="line">+trimToSize(): void//减少用于字符串构建器的存储大小</span><br></pre></td></tr></table></figure><p>​    capacity()方法返回字符串构建器当前的容量。容量是指在不增加构建器大小的情况下存储的字符数量。</p><p>​    length()方法返回字符串构建器中实际存储的字符数量，setLength(newLength)方法设置字符串构建器的长度。如果参数newLength小于字符串构建器当前的长度，则字符串构建器会被截短到恰好能包含由参数newLength给定的字符个数。如果参数newLength大于或者等于当前长度，则给字符串构建器追加足够多的空字符(‘\u0000’),使其长度length变成新参数newLength。参数newLength必须大于等于0。</p><p>​    charAt(index)方法返回字符串构建器中某个特定下标index的字符。下标是基于0的，字符串构建器中的第一个字符的下标为0，第二个字符下标为1，以此类推。参数index必须大于或等于0，并且小于字符串构建器的长度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;toString、capacity、length、setlength和charAt方法&quot;&gt;&lt;a href=&quot;#toString、capacity、length、setlength和charAt方法&quot; class=&quot;headerlink&quot; title=&quot;toStri
      
    
    </summary>
    
      <category term="Java(基础篇)" scheme="http://yoursite.com/categories/Java-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>StringBuilder-----修改StringBuilder中的字符串</title>
    <link href="http://yoursite.com/2018/04/17/StringBuilder-----%E4%BF%AE%E6%94%B9StringBuilder%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2018/04/17/StringBuilder-----修改StringBuilder中的字符串/</id>
    <published>2018-04-17T15:32:23.000Z</published>
    <updated>2018-04-17T16:04:03.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="StringBuilder—–修改StringBuilder中的字符串"><a href="#StringBuilder—–修改StringBuilder中的字符串" class="headerlink" title="StringBuilder—–修改StringBuilder中的字符串"></a>StringBuilder—–修改StringBuilder中的字符串</h1><hr><p><strong>要点提示：</strong>StringBuilder和StringBuffer类似于String类，区别在于String类是不可变的。</p><p>​    一般只要使用字符的地方都可以使用StringBuilder和StringBuffer类，可以给一个StringBuilder和StringBuffer类中<strong>添加、插入或追加</strong>新的内容，而String不行。</p><p>多任务并发访问，就是用StringBuffer，因为这种情况下需要同步以防止StringBuffer崩溃。</p><p>单任务访问，使用StringBuilder更有效果。</p><p><strong>java.lang.StringBuilder</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+StringBuilder() //构建一个容量为16的字符串构建器</span><br><span class="line">+StringBuilder(capacity: int) //构建一个指定容量的字符串构建器</span><br><span class="line">+StringBuilder(s: String)//构建一个指定字符的字符串构建器</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+append(data: char[]): StringBuilder//追加一个字符数组到字符串构建器</span><br><span class="line">+append(data: char[],offset: int,len: int): StringBuilder//追加data中的子数组到字符串构建器</span><br><span class="line">+append(v: aPrimitiveType): StringBuilder//将一个基本类型值作为字符串追加到字符串构建器中</span><br><span class="line">+append(s: String): StringBuilder//追加一个字符串到字符串构建器</span><br><span class="line">+delete(startIndex: int,endIndex: int): StringBuilder//删除从startIndex到endIndex-1的字符</span><br><span class="line">+deleteCharAt(indexL int): StringBuilder//删除给定索引位置的字符</span><br><span class="line">+insert(index:int,data: char[],offset: int,len:int): StringBuilder//在字符串构建器的给定索引位置插入数组data的子数组</span><br><span class="line">+insert(offset: int,data: char[]): StringBuilder//向构建器偏移位置插入数据</span><br><span class="line">+insert(offset: int,b:a: PrimitiveType): StringBuilder//向该字符串构建器插入一个转换为字符串的值</span><br><span class="line">+replace(startIndex: int,endIndex: int,s: String): StringBuilder//将该构建器从startIndex到endIndex-1的位置的字符替换为给定的字符串</span><br><span class="line">+reverse(): StringBuilder//倒置构建器中的字符</span><br><span class="line">+setCharAt(index: int,ch: char): StringBuilder//将该构建器的指定索引位置设置为新的字符</span><br></pre></td></tr></table></figure><p>​    StringBuilder类提供了几个重载方法，可以将boolean、char、char数组、double、float、int、long和String类型值追加到字符串构建器。例如下面的代码将字符串和字符追加到stringBuilder，构成新的字符串”Welcome to Java”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder stringBuilder=new StringBuilder();</span><br><span class="line">stringBuilder.append(&quot;Welcome&quot;);</span><br><span class="line">stringBuilder.append(&quot; &quot;);</span><br><span class="line">stringBuilder.append(&quot;to&quot;);</span><br><span class="line">stringBuilder.append(&quot; &quot;);</span><br><span class="line">stringBuilder.append(&quot;Java&quot;);</span><br></pre></td></tr></table></figure><p>​    StringBuilderl类也包括几个重载的方法，可以可以将boolean、char、char数组、double、float、int、long和String类型值追加到字符串构建器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringBuilder.insert(11,&quot;HTML and&quot;);</span><br></pre></td></tr></table></figure><p>接上条代码，新的stringBuilder就变成了”Welcome to HTML and Java”。</p><p>​    也可以使用两个delete方法将字符从构建器中的字符串中删除，使用reverse方法导致字符串，使用replace方法替换字符串中的字符，或者使用setCharAt方法在字符串中设置一个新字符。</p><p>假设应用下面方法前stringBuilder包含的是”Welcome to Java”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stringBuilder.delete(8,11);//将构建器变为Welcome Java</span><br><span class="line">stringBuilder.deleteCharAt(8);//将构建器变为Welcome o Java</span><br><span class="line">stringBuilder.reverse();//将构建器变为avaJ ot emocleW</span><br><span class="line">stringBuilder.replace(11,15,&quot;HTML&quot;);//将构建器变为Welcome to HTML</span><br><span class="line">stringBuilder.setCharAt(0,&apos;w&apos;);将构建器变为welcome to Java</span><br></pre></td></tr></table></figure><p>未完待续…………</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;StringBuilder—–修改StringBuilder中的字符串&quot;&gt;&lt;a href=&quot;#StringBuilder—–修改StringBuilder中的字符串&quot; class=&quot;headerlink&quot; title=&quot;StringBuilder—–修改Strin
      
    
    </summary>
    
      <category term="Java(基础篇)" scheme="http://yoursite.com/categories/Java-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>如何解决安卓项目在Android Studio无法打开</title>
    <link href="http://yoursite.com/2018/04/16/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%AE%89%E5%8D%93%E9%A1%B9%E7%9B%AE%E5%9C%A8Android%20Studio%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/"/>
    <id>http://yoursite.com/2018/04/16/如何解决安卓项目在Android Studio无法打开/</id>
    <published>2018-04-16T15:19:16.000Z</published>
    <updated>2018-04-16T15:19:45.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何解决安卓项目在Android-Studio无法打开"><a href="#如何解决安卓项目在Android-Studio无法打开" class="headerlink" title="如何解决安卓项目在Android Studio无法打开"></a>如何解决安卓项目在Android Studio无法打开</h1><hr><p>​    在github上下载一些安卓源码项目后，导入到Android Studio的时候无法导入，于是开始网上搜索大佬们的经验，为了避免忘记，还会自己写一篇博客吧，方便自己以后导入项目。</p><p>修改三处即可：</p><p>①build.gradle文件（在根目录下）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:2.3.3&apos;//将此处版本号改为自己AS的版本</span><br><span class="line"></span><br><span class="line">        // NOTE: Do not place your application dependencies here; they belong</span><br><span class="line">        // in the individual module build.gradle files</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    如果不知道自己Android Studio的版本的话，新建一个项目，打开同样的文件查看。</p><p>②app文件夹中的build.gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 26//</span><br><span class="line">    buildToolsVersion &quot;26.0.1&quot;//</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId &quot;com.example.zhaoxudong.calculatorapp&quot;</span><br><span class="line">        minSdkVersion 14//</span><br><span class="line">        targetSdkVersion 26//</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    用//标注的地方，修改成跟自己Android Studio一样的。</p><p>③gradle/wrapper/gradle-wrapper.properties文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#Mon Dec 28 10:00:20 PST 2015</span><br><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=wrapper/dists</span><br><span class="line">zipStoreBase=GRADLE_USER_HOME</span><br><span class="line">zipStorePath=wrapper/dists</span><br><span class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip//</span><br></pre></td></tr></table></figure><p>​    将//前面的/gadle-3.3-all.zip里面的数字改为与自己Android Studio一样的。</p><p>此时再从Android Studio中导入该项目就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何解决安卓项目在Android-Studio无法打开&quot;&gt;&lt;a href=&quot;#如何解决安卓项目在Android-Studio无法打开&quot; class=&quot;headerlink&quot; title=&quot;如何解决安卓项目在Android Studio无法打开&quot;&gt;&lt;/a&gt;如何解决安
      
    
    </summary>
    
      <category term="Android编程" scheme="http://yoursite.com/categories/Android%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>BigInteger和BigDecimal类</title>
    <link href="http://yoursite.com/2018/04/16/BigInteger%E5%92%8CBigDecimal%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/04/16/BigInteger和BigDecimal类/</id>
    <published>2018-04-16T08:32:23.000Z</published>
    <updated>2018-04-16T08:32:40.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BigInteger和BigDecimal类"><a href="#BigInteger和BigDecimal类" class="headerlink" title="BigInteger和BigDecimal类"></a>BigInteger和BigDecimal类</h1><hr><p><strong>要点提示：</strong>BigInteger和BigDecimal类可以用于表示任意大小和精度的整数或者十进制数。</p><p>​    如果要进行非常大的数的计算或者高精度浮点值的计算，可以使用java.math包中的BigInteger和BigDecimal类。他们都是不可变的。long类型的最大整数值为</p><p>long.MAX_VALUE（即9223372036854775807）。BigInteger的实例可以表示任意大小的整数。可以使用new BigInteger(String)和new BigDecimal(String)来创建BigInteger和BigDecimal的实例，使用<strong>add、subtract、multiple、divide和remainder</strong>方法完成算数运算，使用<strong>compareTo</strong>方法比较两个大数字。例如下面代码创建两个BigInteger对象并且将它们进行相乘：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BigInteger a = new BigInteger(&quot;9223372036854775807&quot;);</span><br><span class="line">BigInteger b = new BigInteger(&quot;2&quot;);</span><br><span class="line">BigInteger c = a.multiply(b);//9223372036854775807*2</span><br><span class="line">System.out.println(c);</span><br></pre></td></tr></table></figure><p>它的输出为18446744073709551614。</p><p>对BigDecimal对象的精度没有限制。如果结果不能终止，那么divide方法会抛出ArithmeticException异常。但是可以使用重载divide(BigDecimal d,int scale,int roundingMode)方法来指定制度和摄入方式来避免这个异常，这里的scale是指小数点后最小的整数位数。例如下面的代码创建两个尺度为20、摄入方式为BigDecimal.ROUND_UP的BigDecimal对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal a = new BigDecimal(1.0);</span><br><span class="line">BigDecimal b = new BigDecimal(3);</span><br><span class="line">BigDecimal c= a.divide(b,20,BigDecimal.ROUND_UP)；</span><br><span class="line">Sysyem.out.println(c);</span><br></pre></td></tr></table></figure><p>输出为0.33333333333333333334。</p><p>注意，一个整数的阶乘可能会很大，下面的程序给出可以返回任意整数阶乘的方法。</p><p>LargeFactorial.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package ohhh;</span><br><span class="line">import java.math.*;</span><br><span class="line"></span><br><span class="line">public class LargeFactorial &#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">System.out.println(&quot;50! is\n&quot;+factorial(50));&#125;</span><br><span class="line">public static BigInteger factorial(long n)&#123;</span><br><span class="line">BigInteger result=BigInteger.ONE;//等价于=new BigInteger(&quot;1&quot;)</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">result=result.multiply(new BigInteger(i+&quot;&quot;));//BigInteger(String)</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><p>50! is<br>30414093201713378043612608166064768844377641568960512000000000000</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;BigInteger和BigDecimal类&quot;&gt;&lt;a href=&quot;#BigInteger和BigDecimal类&quot; class=&quot;headerlink&quot; title=&quot;BigInteger和BigDecimal类&quot;&gt;&lt;/a&gt;BigInteger和BigDecima
      
    
    </summary>
    
      <category term="Java(基础篇)" scheme="http://yoursite.com/categories/Java-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>关键字this引用</title>
    <link href="http://yoursite.com/2018/04/16/this%E5%BC%95%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/16/this引用/</id>
    <published>2018-04-16T06:28:56.000Z</published>
    <updated>2018-04-16T06:29:12.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关键字this引用"><a href="#关键字this引用" class="headerlink" title="关键字this引用"></a>关键字this引用</h1><hr><p><strong>要点提示：</strong>关键字this引用独享自身。他也可以在构造方法内部调用另一个类的其他构造方法。</p><p>​    关键字this是指向调用对象本身的引用名。可以用this关键字引用对象的实例成员。</p><p>例如：下面a的代码使用this来显示地引用独享的radius以及调用他的getArea()方法。this引用通常可以省略掉的，如b所示。然而，在引用隐藏数据域的以及调用一个重载的构造方法的时候，this引用是必须的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//a:</span><br><span class="line">public class Circle&#123;</span><br><span class="line">    private double radius;</span><br><span class="line">    .....</span><br><span class="line">    public double getArea() &#123;</span><br><span class="line">        return this.radius*this.radius*Math.PI;</span><br><span class="line">    &#125;</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;radius&quot;+this.radius+&quot;area&quot;+this.getArea();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//b:</span><br><span class="line">public class Circle&#123;</span><br><span class="line">    private double radius;</span><br><span class="line">    .....</span><br><span class="line">    public double getArea() &#123;</span><br><span class="line">        return radius*radius*Math.PI;</span><br><span class="line">    &#125;</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;radius&quot;+radius+&quot;area&quot;+getArea();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用this引用隐藏数据域"><a href="#使用this引用隐藏数据域" class="headerlink" title="使用this引用隐藏数据域"></a>使用this引用隐藏数据域</h2><p>​    this关键字可以用于引用类的隐藏数据域。例如在数据域set方法中，经常将数据域名用作参数名。在这种情况下，这个数据域在set方法中被隐藏。为了给他设置新值，需要在方法中引用隐藏的数据域名。隐藏的静态变量可以简单的通过“类名.静态变量”的方式引用。隐藏的实例变量就需要使用关键字this来引用了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class F &#123;</span><br><span class="line">    private int i = 5;</span><br><span class="line">    private static double k = 0;</span><br><span class="line">    public void setI(int i)&#123;</span><br><span class="line">        this.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void setK(double k) &#123;</span><br><span class="line">        F.k = k;</span><br><span class="line">    &#125;</span><br><span class="line">    //other menthods omitted</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用this调用构造方法"><a href="#使用this调用构造方法" class="headerlink" title="使用this调用构造方法"></a>使用this调用构造方法</h2><p>​    关键字this可以用于调用同一个类的另一个构造方法。例如，可以如下改写Circle类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Circle &#123;</span><br><span class="line">    private double radius;</span><br><span class="line">    public Circle(double radius) &#123;</span><br><span class="line">        tihs.radius = radius;//this关键字用于引用所构建的对象的隐藏数据radius</span><br><span class="line">    &#125;</span><br><span class="line">    public Circle() &#123;</span><br><span class="line">        tihs(1.0);//this关键字用来调用另一个构造方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在第二个构造方法中，this(1.0)这一行调用带double值参数的第一个构造方法。</p><p><strong>注意：</strong>Java要求在构造方法中，语句this(参数列表)应在任何其他可执行语句之前出现。</p><p><strong>提示：</strong>如果一个类有多个构造方法，最好尽可能的使this(参数列表)实现它们。通常，无参数或参数少的构造方法可以用this(参数列表)调用参数多德构造方法。这样做通常可以简化代码，使类便于阅读和维护。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关键字this引用&quot;&gt;&lt;a href=&quot;#关键字this引用&quot; class=&quot;headerlink&quot; title=&quot;关键字this引用&quot;&gt;&lt;/a&gt;关键字this引用&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;要点提示：&lt;/strong&gt;关键字this引用独享自身。他
      
    
    </summary>
    
      <category term="Java(基础篇)" scheme="http://yoursite.com/categories/Java-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java库中的Point2D类</title>
    <link href="http://yoursite.com/2018/04/15/Java%E5%BA%93%E4%B8%AD%E7%9A%84Point2D%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/04/15/Java库中的Point2D类/</id>
    <published>2018-04-15T03:04:23.000Z</published>
    <updated>2018-04-15T03:04:38.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java库中的Point2D类"><a href="#Java库中的Point2D类" class="headerlink" title="Java库中的Point2D类"></a>Java库中的Point2D类</h1><hr><p><strong>javafx.geometry.Point2D</strong></p><p>+Point2D(x: double,y: double)        //用给定的x和y坐标来创建一个Point2D对象</p><p>+distance(x: double,y: double): double        //返回该点到定点（x,y）的距离</p><p>+distance(p: Point2D): double        //返回该点到p点的距离</p><p>+getX(): double                //返回该点的x的坐标</p><p>+getY(): double                //返回该点的y的坐标</p><p>+toString(): String                //返回该点的字符串表示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">import javafx.geometry.Point2D;</span><br><span class="line">public class TestPoint2D &#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">Scanner input= new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;Enter point1&apos;s x-,y-coordinates:&quot;);</span><br><span class="line">double x1=input.nextDouble();</span><br><span class="line">double y1=input.nextDouble();</span><br><span class="line">System.out.println(&quot;Enter point2&apos;s x-,y-coordinates:&quot;);</span><br><span class="line">double x2=input.nextDouble();</span><br><span class="line">double y2=input.nextDouble();</span><br><span class="line">Point2D p1 =new Point2D(x1,y1);</span><br><span class="line">Point2D p2 =new Point2D(x2,y2);</span><br><span class="line">System.out.println(&quot;p1 is&quot;+p1.toString());</span><br><span class="line">System.out.println(&quot;p2 is&quot;+p2.toString());</span><br><span class="line">System.out.println(&quot;distance is&quot;+p1.distance(p2));</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么会把这个类单拿出来呢，因为在<strong>eclipse</strong>运行的时候，你会发现会<strong>报错</strong>，难道是书写错了？不不不，下面是<strong>答案：</strong></p><p>这是因为这个类是Eclipse的JRE带的，但并不属于JAVA的公开API。<br>解决方法：<br>右击项目-&gt;属性-&gt;Java Compiler-&gt;Errors/Warnings-&gt;Deprecated and restricted API-&gt;Forbidden reference -&gt; Ignore</p><p><strong>运行结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Enter point1&apos;s x-,y-coordinates:</span><br><span class="line">1 2</span><br><span class="line">Enter point2&apos;s x-,y-coordinates:</span><br><span class="line">3 4</span><br><span class="line">p1 isPoint2D [x = 1.0, y = 2.0]</span><br><span class="line">p2 isPoint2D [x = 3.0, y = 4.0]</span><br><span class="line">distance is2.8284271247461903</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java库中的Point2D类&quot;&gt;&lt;a href=&quot;#Java库中的Point2D类&quot; class=&quot;headerlink&quot; title=&quot;Java库中的Point2D类&quot;&gt;&lt;/a&gt;Java库中的Point2D类&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;javaf
      
    
    </summary>
    
      <category term="Java(基础篇)" scheme="http://yoursite.com/categories/Java-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用Java库中的类</title>
    <link href="http://yoursite.com/2018/04/15/%E4%BD%BF%E7%94%A8Java%E5%BA%93%E4%B8%AD%E7%9A%84%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/04/15/使用Java库中的类/</id>
    <published>2018-04-15T02:52:23.000Z</published>
    <updated>2018-04-15T02:52:32.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Java库中的类"><a href="#使用Java库中的类" class="headerlink" title="使用Java库中的类"></a>使用Java库中的类</h1><hr><h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><p><strong>java.util.Date</strong></p><p>+Date()            //为当前时间创建一个Date对象</p><p>+Date(elapseTime: long)//为一个从格林威治时间1970年1月1日至今流逝的以毫秒为单位计算的给定时间创建的Date对象</p><p>+toString(): String        //返回一个代表日期和时间的字符串表示</p><p>+getTime(): long        //返回从格林威治时间1970年1月1日至今流逝的毫秒数</p><p>+setTime(elapseTime: long): void    //在对象中设置一个新的流逝时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.util.Date date = new java.util.Date();</span><br><span class="line">System.out.println(&quot;The elapsed time since Jan 1,1970 is&quot;+date.getTime()+&quot;milliseconds&quot;);</span><br><span class="line">System.out.println(date.toString());</span><br><span class="line">//输出：</span><br><span class="line">The elapsed time since Jan 1,1970 is1523760077427milliseconds</span><br><span class="line">Sun Apr 15 10:41:17 CST 2018</span><br></pre></td></tr></table></figure><h2 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h2><p><strong>java.util.Random</strong></p><p>+Random()        //以当前时间创建一个Random对象</p><p>+Random(seed: long)        //以一个特定的值作为种子创建一个Random对象</p><p>+nextInt(): int        //返回一个随机的int值</p><p>+nextInt(n: int): int        //返回一个0到n之间的随机int类型的数</p><p>+nextLong(): long            //返回一个0到n之间的随机long值</p><p>+nextDouble(): double    //返回一个0.0到1.0（不包含1.0）之间的随机double类型的值</p><p>+nextFloat(): float            //返回一个0.0F到1.0F（不包含1.0F）之间的随机float类型的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">java.util.Random random1 = new java.util.Random(3);</span><br><span class="line">System.out.println(&quot;From random1:&quot;);</span><br><span class="line">for(int i=0;i&lt;10;i++)</span><br><span class="line">System.out.print(random1.nextInt(1000)+&quot; &quot;);</span><br><span class="line"></span><br><span class="line">java.util.Random random2 = new java.util.Random(3);</span><br><span class="line">System.out.println(&quot;\nFrom random2:&quot;);</span><br><span class="line">for(int i=0;i&lt;10;i++)</span><br><span class="line">System.out.print(random2.nextInt(1000)+&quot; &quot;);</span><br><span class="line"></span><br><span class="line">java.util.Random random3 = new java.util.Random();</span><br><span class="line">System.out.println(&quot;\nFrom random3:&quot;);</span><br><span class="line">for(int i=0;i&lt;10;i++)</span><br><span class="line">System.out.print(random3.nextInt(1000)+&quot; &quot;);</span><br><span class="line">//输出：</span><br><span class="line">From random1:</span><br><span class="line">734 660 210 581 128 202 549 564 459 961 </span><br><span class="line">From random2:</span><br><span class="line">734 660 210 581 128 202 549 564 459 961 </span><br><span class="line">From random3:</span><br><span class="line">384 412 586 796 729 521 52 718 586 355</span><br></pre></td></tr></table></figure><p>还有一个类，我们在下一篇文章介绍，有一点特殊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用Java库中的类&quot;&gt;&lt;a href=&quot;#使用Java库中的类&quot; class=&quot;headerlink&quot; title=&quot;使用Java库中的类&quot;&gt;&lt;/a&gt;使用Java库中的类&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;Date类&quot;&gt;&lt;a href=&quot;#Date类&quot; clas
      
    
    </summary>
    
      <category term="Java(基础篇)" scheme="http://yoursite.com/categories/Java-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java类多文件运行</title>
    <link href="http://yoursite.com/2018/04/14/Java%E7%B1%BB%E5%A4%9A%E6%96%87%E4%BB%B6%E8%BF%90%E8%A1%8C/"/>
    <id>http://yoursite.com/2018/04/14/Java类多文件运行/</id>
    <published>2018-04-14T01:45:23.000Z</published>
    <updated>2018-04-14T01:47:51.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java类多文件运行"><a href="#Java类多文件运行" class="headerlink" title="Java类多文件运行"></a>Java类多文件运行</h1><hr><h2 id="TV类对电视机的建模："><a href="#TV类对电视机的建模：" class="headerlink" title="TV类对电视机的建模："></a>TV类对电视机的建模：</h2><p>​    channel: int             //这个TV的当前频道（从1到120）</p><p>​    volumeLevel: int     //这个TV的当前音量（从1到7）</p><p>​    on: boolean             //表明这个TV是开的还是关的</p><p>​    +TV()              //构造一个默认的TV对象</p><p>​    +turnOn(): void       //打开这个TV</p><p>​    +turnOff(): void       //关闭这个TV</p><p>​    +setChannel(newChannel: int): void        //为这个TV设置一个新频道</p><p>​    +setVolume(newVolumeLevel: int): void  //为这个TV设置一个新音量</p><p>​    +channelUp(): void                    //给频道数+1</p><p>​    +channelDown(): void                    //给频道数-1</p><p>​    +volumeUp(): void                     //给音量+1</p><p>​    +volumeDown:void                    //给音量-1</p><h2 id="TV-java文件"><a href="#TV-java文件" class="headerlink" title="TV.java文件"></a>TV.java文件</h2><p>TV类中的构造方法定义为公共的，因此可以从其他类中访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class TV &#123;</span><br><span class="line">int channel = 1;</span><br><span class="line">int volumeLevel = 1;</span><br><span class="line">boolean on = false;</span><br><span class="line">public void turnOn()&#123;//开</span><br><span class="line">on = true;</span><br><span class="line">&#125;</span><br><span class="line">public void turnOff()&#123;//关</span><br><span class="line">on = false;</span><br><span class="line">&#125;</span><br><span class="line">public void setChannel(int newChannel)&#123;</span><br><span class="line">if(on &amp;&amp; newChannel &gt;= 1&amp;&amp; newChannel &lt;= 120)</span><br><span class="line">volumeLevel = newChannel;</span><br><span class="line">&#125;</span><br><span class="line">public void setVolume(int newVolumeLevel)&#123;</span><br><span class="line">if(on &amp;&amp; newVolumeLevel &gt;=1 &amp;&amp; newVolumeLevel &lt;=7)</span><br><span class="line">volumeLevel = newVolumeLevel;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public void channelUp()&#123;</span><br><span class="line">if(on &amp;&amp; channel &lt; 120)</span><br><span class="line">channel++;</span><br><span class="line">&#125;</span><br><span class="line">public void channelDown()&#123;</span><br><span class="line">if (on &amp;&amp; channel &gt; 1)</span><br><span class="line">channel--;</span><br><span class="line">&#125;</span><br><span class="line">public void volumeUp()&#123;</span><br><span class="line">if(on &amp;&amp; volumeLevel &lt; 7)</span><br><span class="line">volumeLevel++;</span><br><span class="line">&#125;</span><br><span class="line">public void volumeDown()&#123;</span><br><span class="line">if(on &amp;&amp; volumeLevel &gt; 1)</span><br><span class="line">volumeLevel--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TestTV-java文件"><a href="#TestTV-java文件" class="headerlink" title="TestTV.java文件"></a>TestTV.java文件</h2><p>第3行和第8行创建了两个对象，然后调用对象中的方法来完成设置频道和音量的动作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class TestTV &#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">TV tv1 = new TV();</span><br><span class="line">tv1.turnOn();//tv1 开</span><br><span class="line">tv1.setChannel(30);//频道 30</span><br><span class="line">tv1.setVolume(3);// 音量 3</span><br><span class="line"></span><br><span class="line">TV tv2 = new TV();</span><br><span class="line">tv2.turnOn();// tv2 开</span><br><span class="line">tv2.channelUp();// tv2 频道+1</span><br><span class="line">tv2.volumeUp();//tv2 音量+1</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;tv1的频道是&quot;+tv1.channel+&quot;声音是&quot;+tv1.volumeLevel);</span><br><span class="line">System.out.println(&quot;tv2的频道是&quot;+tv2.channel+&quot;声音是&quot;+tv2.volumeLevel);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tv1的频道是1声音是3</span><br><span class="line">tv2的频道是2声音是2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java类多文件运行&quot;&gt;&lt;a href=&quot;#Java类多文件运行&quot; class=&quot;headerlink&quot; title=&quot;Java类多文件运行&quot;&gt;&lt;/a&gt;Java类多文件运行&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;TV类对电视机的建模：&quot;&gt;&lt;a href=&quot;#TV类对电
      
    
    </summary>
    
      <category term="Java(基础篇)" scheme="http://yoursite.com/categories/Java-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客添加搜索功能</title>
    <link href="http://yoursite.com/2018/04/13/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2018/04/13/hexo博客添加搜索功能/</id>
    <published>2018-04-13T03:19:55.000Z</published>
    <updated>2018-04-13T03:26:21.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo博客添加搜索功能"><a href="#hexo博客添加搜索功能" class="headerlink" title="hexo博客添加搜索功能"></a>hexo博客添加搜索功能</h1><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  当博文慢慢变多的时候，标签和分类已经不能提供太大的作用，无法准确的定位到自己想要看的博客上去，所以添加一个本站内搜索功能是很有必要的。</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>直接在自己的博客文件夹下（我的是blog）点击鼠标右键选择<strong>Git Bash Here</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><h3 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h3><p>我的路径是：blog下的_config.yml文件，进行编辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search：</span><br><span class="line">path: search.xml</span><br><span class="line">field: post</span><br><span class="line">format: html</span><br><span class="line">limit: 10000</span><br></pre></td></tr></table></figure><p>PS:每个冒号后面都有空格。</p><h2 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h2><p>我的路径：/blog/themes/next下的_config.yml文件，进行编辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">enable: true</span><br></pre></td></tr></table></figure><p>PS:冒号后面都有空格。</p><p>  此时，部署到github，打开网页就可以看到搜索功能了，容易添加，使用起来很方便，推荐添加，增加网站友好度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hexo博客添加搜索功能&quot;&gt;&lt;a href=&quot;#hexo博客添加搜索功能&quot; class=&quot;headerlink&quot; title=&quot;hexo博客添加搜索功能&quot;&gt;&lt;/a&gt;hexo博客添加搜索功能&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; cl
      
    
    </summary>
    
      <category term="博客杂谈" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="博客搭建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客添加评论神器---valine</title>
    <link href="http://yoursite.com/2018/04/12/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%A5%9E%E5%99%A8---valine/"/>
    <id>http://yoursite.com/2018/04/12/hexo博客添加评论神器---valine/</id>
    <published>2018-04-12T15:15:23.000Z</published>
    <updated>2018-04-15T02:53:17.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo博客添加评论神器—valine"><a href="#hexo博客添加评论神器—valine" class="headerlink" title="hexo博客添加评论神器—valine"></a>hexo博客添加评论神器—valine</h1><hr><p>我们评论系统是放在LeanCloud上的，因此需要先去注册一个账号。</p><p><a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud官网，点击注册</a></p><p>注册完成后需要创建一个应用，创建成功以后，<strong>进入应用→设置→应用key</strong></p><p>获取到了你的<strong>appid</strong>和<strong>appkey</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">App ID</span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">每个app有一个唯一的ID，不可变更</span><br><span class="line"></span><br><span class="line">App Key</span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">适用于所有平台</span><br></pre></td></tr></table></figure><p>拥有了你的<strong>appid</strong>和<strong>appkey</strong>后，打开<strong>主题配置文件</strong>（blog/themes/next/_config.yml）填写<strong>appid</strong>和<strong>appkey</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">valine：</span><br><span class="line">enable: true</span><br><span class="line">appid: your app id //你获取的appid</span><br><span class="line">appkey your app key //你获取的app key</span><br><span class="line">notifiy: false # mail notifier,https://github.com/xCss/Valine/wiki //是否开启邮箱提醒</span><br><span class="line">verfify: false # Verifaication code //开启验证码</span><br><span class="line">planceholde: 评论内容。 //你要发表的评论内容</span><br><span class="line">guest_info: nick,mail,link</span><br><span class="line">pageSize: 10</span><br></pre></td></tr></table></figure><p>PS：配置的时候自行删除”//“开始以后的注释内容，同时如果开启邮箱提醒的话，会默认开启验证码模式。</p><p>完成这些以后还需要在<strong>LeanCloud</strong>中，<strong>进入应用→设置→安全中心</strong>在Web 安全域名中填写自己的博客首页，然后保存。</p><p>最后部署到github，打开自己的博客就可以看到评论功能，有没有点小激动，快去邀请小伙伴发表评论吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hexo博客添加评论神器—valine&quot;&gt;&lt;a href=&quot;#hexo博客添加评论神器—valine&quot; class=&quot;headerlink&quot; title=&quot;hexo博客添加评论神器—valine&quot;&gt;&lt;/a&gt;hexo博客添加评论神器—valine&lt;/h1&gt;&lt;hr&gt;

      
    
    </summary>
    
      <category term="博客杂谈" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="博客搭建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="Valine" scheme="http://yoursite.com/tags/Valine/"/>
    
  </entry>
  
</feed>
